using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Flurl.Http.CodeGen
{
	class Program
	{
		static int Main(string[] args) {
			var codeRoot = (args.Length > 0) ? args[0] : @"..\..\..\..\..";

			try {
				var path = codeRoot + @"\src\Flurl\GeneratedExtensions.cs";
				if (!File.Exists(path)) {
					Console.ForegroundColor = ConsoleColor.Red;
					Console.WriteLine("Code file not found: " + Path.GetFullPath(path));
					Console.ReadLine();
					return 2;
				}

				File.WriteAllText(path, "");
				using (var writer = new CodeWriter(path)) {
					writer
						.WriteLine("// This file was auto-generated by Flurl.Http.CodeGen. Do not edit directly.")
						.WriteLine("using System;")
						.WriteLine("using System.Collections.Generic;")
						.WriteLine("")
						.WriteLine("namespace Flurl")
						.WriteLine("{")
						.WriteLine("/// <summary>")
						.WriteLine("/// Fluent URL-building extension methods on String and Uri.")
						.WriteLine("/// </summary>")
						.WriteLine("public static class GeneratedExtensions")
						.WriteLine("{");

					WriteUrlBuilderExtensionMethods(writer);

					writer
						.WriteLine("}")
						.WriteLine("}");
				}

				path = codeRoot + @"\src\Flurl.Http\GeneratedExtensions.cs";
				if (!File.Exists(path)) {
					Console.ForegroundColor = ConsoleColor.Red;
					Console.WriteLine("Code file not found: " + Path.GetFullPath(path));
					Console.ReadLine();
					return 2;
				}

				File.WriteAllText(path, "");
				using (var writer = new CodeWriter(path)) {
					writer
						.WriteLine("// This file was auto-generated by Flurl.Http.CodeGen. Do not edit directly.")
						.WriteLine("using System;")
						.WriteLine("using System.Collections.Generic;")
						.WriteLine("using System.IO;")
						.WriteLine("using System.Net;")
						.WriteLine("using System.Net.Http;")
						.WriteLine("using System.Threading;")
						.WriteLine("using System.Threading.Tasks;")
						.WriteLine("using Flurl.Http.Configuration;")
						.WriteLine("using Flurl.Http.Content;")
						.WriteLine("")
						.WriteLine("namespace Flurl.Http")
						.WriteLine("{")
						.WriteLine("/// <summary>")
						.WriteLine("/// Fluent extension methods on String, Url, Uri, and IFlurlRequest.")
						.WriteLine("/// </summary>")
						.WriteLine("public static class GeneratedExtensions")
						.WriteLine("{");

					WriteHttpExtensionMethods(writer);

					writer
						.WriteLine("}")
						.WriteLine("}");
				}

				Console.WriteLine("File writing succeeded.");
				return 0;
			}
			catch (Exception ex) {
				Console.ForegroundColor = ConsoleColor.Red;
				Console.WriteLine(ex);
				Console.ReadLine();
				return 2;
			}
		}

		private static void WriteUrlBuilderExtensionMethods(CodeWriter writer) {
			var extendedArgs = new[] {
				new { Name = "url", Type = "string", Descrip = "This URL." },
				new { Name = "uri", Type = "Uri", Descrip = "This System.Uri." }
			};

			foreach (var firstArg in extendedArgs) {
				foreach (var xm in ExtensionMethod.GetAllForUrlBuilder()) {
					Console.WriteLine($"writing {xm.Name} for {firstArg.Type}...");

					writer.WriteLine("/// <summary>");
					writer.WriteLine($"/// {xm.Description}");
					writer.WriteLine("/// </summary>");
					writer.WriteLine($"/// <param name=\"{firstArg.Name}\">{firstArg.Descrip}</param>");
					foreach (var p in xm.Params)
						writer.WriteLine($"/// <param name=\"{p.Name}\">{p.Description}</param>");
					writer.WriteLine($"/// <returns>A new Flurl.Url object.</returns>");

					var argList = new List<string> { $"this {firstArg.Type} {firstArg.Name}" };
					argList.AddRange(xm.Params.Select(p => $"{p.Type} {p.Name}" + (p.Default == null ? "" : $" = {p.Default}")));
					writer.WriteLine($"public static Url {xm.Name}({string.Join(", ", argList)}) {{");
					writer.WriteLine($"return new Url({firstArg.Name}).{xm.Name}({string.Join(", ", xm.Params.Select(p => p.Name))});");
					writer.WriteLine("}");
				}
			}
		}

		private static void WriteHttpExtensionMethods(CodeWriter writer) {
			var extendedArgs = new[] {
				new { Name = "request", Type = "IFlurlRequest", Descrip = "This IFlurlRequest" },
				new { Name = "url", Type = "Url", Descrip = "This Flurl.Url." },
				new { Name = "url", Type = "string", Descrip = "This URL." },
				new { Name = "uri", Type = "Uri", Descrip = "This System.Uri." }
			};

			foreach (var firstArg in extendedArgs) {
				foreach (var xm in HttpExtensionMethod.GetAll().Where(x => IsSupportedCombo(x.HttpVerb, x.RequestBodyType, firstArg.Type))) {
					Console.WriteLine($"writing {xm.Name} for {firstArg.Type}...");

					var hasRequestBody = (xm.HttpVerb == "Post" || xm.HttpVerb == "Put" || xm.HttpVerb == "Patch" || xm.HttpVerb == null);

					writer.WriteLine("/// <summary>");
					var summaryStart = (firstArg.Type == "IFlurlRequest") ? "Sends" : "Creates a FlurlRequest and sends";
					if (xm.HttpVerb == null)
						writer.WriteLine("/// @0 an asynchronous request.", summaryStart);
					else
						writer.WriteLine("/// @0 an asynchronous @1 request.", summaryStart, xm.HttpVerb.ToUpperInvariant());

					writer.WriteLine("/// </summary>");
					writer.WriteLine($"/// <param name=\"{firstArg.Name}\">{firstArg.Descrip}</param>");

					if (xm.HttpVerb == null)
						writer.WriteLine("/// <param name=\"verb\">The HTTP verb used to make the request.</param>");

					if (hasRequestBody) {
						if (xm.RequestBodyType == "Json")
							writer.WriteLine("/// <param name=\"data\">An object representing the request body, which will be serialized to JSON.</param>");
						else if (xm.RequestBodyType != null)
							writer.WriteLine("/// <param name=\"data\">Contents of the request body.</param>");
						else
							writer.WriteLine("/// <param name=\"content\">Contents of the request body.</param>");
					}

					writer.WriteLine("/// <param name=\"cancellationToken\">The token to monitor for cancellation requests.</param>");
					writer.WriteLine("/// <param name=\"completionOption\">The HttpCompletionOption used in the request. Optional.</param>");
					writer.WriteLine("/// <returns>A Task whose result is @0.</returns>", xm.ReturnTypeDescription);

					var args = new List<string>();
					args.Add($"this {firstArg.Type} {firstArg.Name}");
					if (xm.HttpVerb == null)
						args.Add("HttpMethod verb");
					if (xm.RequestBodyType != null)
						args.Add((xm.RequestBodyType == "String" ? "string" : "object") + " data");
					else if (hasRequestBody)
						args.Add("HttpContent content");

					// http://stackoverflow.com/questions/22359706/default-parameter-for-cancellationtoken
					args.Add("CancellationToken cancellationToken = default(CancellationToken)");
					args.Add("HttpCompletionOption completionOption = HttpCompletionOption.ResponseContentRead");

					writer.WriteLine("public static Task<@0> @1@2(@3) {", xm.TaskArg, xm.Name, xm.IsGeneric ? "<T>" : "", string.Join(", ", args));

					if (firstArg.Type == "IFlurlRequest") {
						args.Clear();
						args.Add(
							xm.HttpVerb == null ? "verb" :
							xm.HttpVerb == "Patch" ? "new HttpMethod(\"PATCH\")" : // there's no HttpMethod.Patch
							"HttpMethod." + xm.HttpVerb);

						if (xm.RequestBodyType != null || hasRequestBody)
							args.Add("content: content");

						args.Add("cancellationToken: cancellationToken");
						args.Add("completionOption: completionOption");

						if (xm.RequestBodyType != null) {
							writer.WriteLine("var content = new Captured@0Content(@1);",
								xm.RequestBodyType,
								xm.RequestBodyType == "String" ? "data" : $"request.Settings.{xm.RequestBodyType}Serializer.Serialize(data)");
						}

						var request = (firstArg.Type == "IFlurlRequest") ? firstArg.Name : $"new FlurlRequest({firstArg.Name})";
						var receive = (xm.ResponseBodyType == null) ? "" : $".Receive{xm.ResponseBodyType}{(xm.IsGeneric ? "<T>" : "")}()";
						writer.WriteLine("return @0.SendAsync(@1)@2;", request, string.Join(", ", args), receive);
					}
					else {
						var typeArg = xm.IsGeneric ? "<T>" : "";
						var argList = string.Join(", ", args.Skip(1).Select(a => a.Split(' ')[1]));
						writer.WriteLine($"return new FlurlRequest({firstArg.Name}).{xm.Name}{typeArg}({argList});");
					}

					writer.WriteLine("}").WriteLine();
				}
			}

			foreach (var firstArg in extendedArgs.Skip(1)) {
				// Skip(1) because these don't apply to IFlurlRequest
				foreach (var xm in ExtensionMethod.GetAllForHttp()) {
					Console.WriteLine($"writing {xm.Name} for {firstArg.Type}...");

					writer.WriteLine("/// <summary>");
					writer.WriteLine($"/// {xm.Description}");
					writer.WriteLine("/// </summary>");
					writer.WriteLine($"/// <param name=\"{firstArg.Name}\">{firstArg.Descrip}</param>");
					foreach (var p in xm.Params)
						writer.WriteLine($"/// <param name=\"{p.Name}\">{p.Description}</param>");
					writer.WriteLine($"/// <returns>{xm.ReturnDescrip}</returns>");

					var argList = new List<string> { $"this {firstArg.Type} {firstArg.Name}" };
					argList.AddRange(xm.Params.Select(p => $"{p.Type} {p.Name}" + (p.Default == null ? "" : $" = {p.Default}")));
					writer.WriteLine($"public static {xm.ReturnType} {xm.Name}({string.Join(", ", argList)}) {{");
					writer.WriteLine($"return new FlurlRequest({firstArg.Name}).{xm.Name}({string.Join(", ", xm.Params.Select(p => p.Name))});");
					writer.WriteLine("}");
				}
			}
		}

		private static bool IsSupportedCombo(string verb, string bodyType, string extensionType) {
			switch (verb) {
				case null: // Send
					return bodyType != null || extensionType != "IFlurlRequest";
				case "Post":
					return true;
				case "Put":
				case "Patch":
					return bodyType != "UrlEncoded";
				default: // Get, Head, Delete, Options
					return bodyType == null;
			}
		}
	}
}